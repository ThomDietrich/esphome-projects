substitutions:
  device_name: taubenkamera1
  device_friendly_name: Taubenkamera1

esphome:
  name: ${device_name}
  friendly_name: ${device_friendly_name}
  platform: ESP32
  board: esp32dev

packages:
  wifi: !include common/wifi.yaml
  general: !include common/general.yaml

#time:
#  - platform: homeassistant

sensor:
  - platform: uptime
    name: "ESP32 Uptime"
    update_interval: 60s
    device_class: duration
  - platform: wifi_signal
    name: "ESP32 WiFi Signal"
    update_interval: 60s

# https://esphome.io/components/esp32_camera.html#configuration-for-ai-thinker-camera
esp32_camera:
  name: "${device_friendly_name}"
  external_clock:
    pin: GPIO0
    frequency: 20MHz
  i2c_pins:
    sda: GPIO26
    scl: GPIO27
  data_pins: [GPIO5, GPIO18, GPIO19, GPIO21, GPIO36, GPIO39, GPIO34, GPIO35]
  vsync_pin: GPIO25
  href_pin: GPIO23
  pixel_clock_pin: GPIO22
  power_down_pin: GPIO32
  # Image settings
  max_framerate: 2 fps    # default: 10 fps, max 60
  idle_framerate: 0.2 fps # default: 0.1 fps - framerate for 'picture' in HA dashboard
  # https://de.wikipedia.org/wiki/Bildaufl%C3%B6sung
  # resolution: QQVGA # 160X120
  # resolution: QCIF # 176X144
  # resolution: HQVGA # 240X176
  # resolution: QVGA # 320X240
  # resolution: CIF # 400X296
  # resolution: VGA # 640X480
  resolution: SVGA # 800X600
  # resolution: XGA # 1024X768
  # resolution: SXGA # 1280X1024
  # resolution: UXGA # 1600X1200
  jpeg_quality: 24  # 10 (best) to 63 (worst)
  vertical_flip: false
  horizontal_mirror: false

  # Image settings
  # (Optional, int): The contrast to apply to the picture, from -2 to 2. Defaults to 0.
  contrast: 0
  # (Optional, int): The brightness to apply to the picture, from -2 to 2. Defaults to 0.
  brightness: 0
  # (Optional, enum): The mode of gain control module. Defaults to auto (leave camera to automatically adjust sensor gain).
  # manual: Gain can be manually set, with agc_value parameter. agc_gain_ceiling has no effect here
  # auto: Camera manage sensor gain automatically. Maximum gain can be defined, thanks to agc_gain_ceiling parameter. agc_value has no effect here
  agc_mode: auto
  # (Optional, int): The gain value to apply to the picture (when aec_mode is set to manual), from 0 to 30. Defaults to 0.
  agc_value: 0
  # (Optional, enum): The maximum gain allowed, when agc_mode is set to auto. This parameter seems act as “ISO” setting. Defaults to 2x.
  # 2x: Camera is less sensitive, picture is clean (without visible noise)
  # 4x
  # 8x
  # 16x
  # 32x
  # 64x
  # 128x: Camera is more sensitive, but picture contain lot of noise
  agc_gain_ceiling: 2x

output:
  - platform: ledc
    pin: GPIO4
    channel: 2 # channel 1 is used for esp32_camera
    id: led
light:
  - platform: monochromatic
    output: led
    name: ${device_friendly_name} Blitzlicht
