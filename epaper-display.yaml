substitutions:
  # secrets
  ota_pw: !secret ota_pw
  wifi_home1_ssid: !secret wifi_home1_ssid
  wifi_home1_password: !secret wifi_home1_password
  wifi_home2_ssid: !secret wifi_home2_ssid
  wifi_home2_password: !secret wifi_home2_password
  wifi_fallback_pw: !secret wifi_fallback_password

esphome:
  name: epaper-display-awf1877-oben
  #name: epaper-display-awf1877-unten
  #name: epaper-display-ha
  platform: esp32
  board: pico32
  on_boot:
    priority: -10
    then:
      - delay: 15s
      - component.update: epaperdisplay

wifi:
  networks:
    - ssid: ${wifi_home1_ssid}
      password: ${wifi_home1_password}
  ap:
    ssid: "ePaper-Display Fallback"
    password: ${wifi_fallback_password}
  # Explicitly use IP address for connection
  #use_address: 192.168.23.187

captive_portal:

logger:

api:
  password: ""

ota:
  password: ${ota_pw}

web_server:
  port: 80

#######################################################################################################################
# Load used fonts and symbols
font:
  # https://materialdesignicons.com/
  # https://pictogrammers.github.io/@mdi/font/5.3.45/

  - id: font_header
    file: 'fonts/Roboto-Bold.ttf'
    size: 20
    glyphs: [
      ' ', '.', ',', ':', ';', '!', '?', '+', '-', '_', '"', '<', '>', '(', ')', '[', ']',
      '&', '@',  '%', '°', '/', 'º', 'µ', '³',
      '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
      'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',
      'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
      'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
      'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
      'ä', 'ö', 'ü', 'Ä', 'Ö', 'Ü', 'ß', 'é',
    ]

  - id: font_footer
    file: 'fonts/Roboto-Regular.ttf'
    size: 14
    glyphs: [
      ' ', '.', ',', ':', ';', '!', '?', '+', '-', '_', '"', '<', '>', '(', ')', '[', ']',
      '&', '@',  '%', '°', '/', 'º', 'µ', '³',
      '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
      'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',
      'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
      'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
      'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
      'ä', 'ö', 'ü', 'Ä', 'Ö', 'Ü', 'ß', 'é',
    ]

  - id: font_position
    file: 'fonts/Roboto-Regular.ttf'
    size: 18
    glyphs: [
      ' ', '.', ',', ':', ';', '!', '?', '+', '-', '_', '"', '<', '>', '(', ')', '[', ']',
      '&', '@',  '%', '°', '/', 'º', 'µ', '³',
      '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
      'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',
      'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
      'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
      'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
      'ä', 'ö', 'ü', 'Ä', 'Ö', 'Ü', 'ß', 'é',
    ]

  - id: font_calendar
  #  file: 'fonts/Roboto-Light.ttf'
    file: 'fonts/Sabon_Roman.ttf'
    size: 20
    glyphs: [
      ' ', '.', ',', ':', ';', '!', '?', '+', '-', '_', '"', '<', '>', '(', ')', '[', ']',
      '&', '@',  '%', '°', '/', 'º', 'µ', '³',
      '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
      'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',
      'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
      'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
      'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
      'ä', 'ö', 'ü', 'Ä', 'Ö', 'Ü', 'ß', 'é',
    ]

  - id: font_wetter_klein
    file: 'fonts/Roboto-Regular.ttf'
    size: 21
    glyphs: [
      ' ', '.', ',', ':', ';', '!', '?', '+', '-', '_', '"', '<', '>', '(', ')', '[', ']',
      '&', '@',  '%', '°', '/', 'º', 'µ', '³',
      '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
      'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',
      'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
      'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
      'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
      'ä', 'ö', 'ü', 'Ä', 'Ö', 'Ü', 'ß', 'é',
    ]

  - id: font_wetter_mittel
    file: 'fonts/Roboto-Regular.ttf'
    size: 22
    glyphs: [
      ' ', '.', ',', ':', ';', '!', '?', '+', '-', '_', '"', '<', '>', '(', ')', '[', ']',
      '&', '@',  '%', '°', '/', 'º', 'µ', '³',
      '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
      'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',
      'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
      'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
      'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
      'ä', 'ö', 'ü', 'Ä', 'Ö', 'Ü', 'ß', 'é',
    ]

  - id: font_wetter_gross
    file: 'fonts/Roboto-Medium.ttf'
    size: 50
    glyphs: [
      ' ', '.', ',', ':', ';', '!', '?', '+', '-', '_', '"', '<', '>', '(', ')', '[', ']',
      '&', '@',  '%', '°', '/', 'º', 'µ', '³',
      '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
      'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',
      'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
      'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
      'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
      'ä', 'ö', 'ü', 'Ä', 'Ö', 'Ü', 'ß', 'é',
    ]

  - id: mdi_wetter_klein
    file: 'fonts/materialdesignicons-webfont.ttf'
    size: 24
    glyphs: [
      '󰔏', # mdi-thermometer
      '󰸂', # mdi-thermometer-chevron-down
      '󰖎', # mdi-water-percent
      '󰆫', # mdi-cup-water
      ]

  - id: mdi_wetter_gross
    file: 'fonts/materialdesignicons-webfont.ttf'
    size: 60
    glyphs: [
      "󰨹", # mdi-cloud-question
      "󰖔", # mdi-weather-night
      "󰖐", # mdi-weather-cloudy
      "󰼯", # mdi-weather-cloudy-alert
      "󰖑", # mdi-weather-fog
      "󰖒", # mdi-weather-hail
      "󰖓", # mdi-weather-lightning
      "󰙾", # mdi-weather-lightning-rainy
      "󰖕", # mdi-weather-partly-cloudy
      "󰼳", # mdi-weather-partly-rainy
      "󰖖", # mdi-weather-pouring
      "󰼶", # mdi-weather-snowy-heavy
      "󰙿", # mdi-weather-snowy-rainy
      "󰖙", # mdi-weather-sunny
      "󰖝", # mdi-weather-windy
      "󰖞", # mdi-weather-windy-variant
    ]

  - id: mdi_letters
    file: 'fonts/materialdesignicons-webfont.ttf'
    size: 33
    glyphs: [
      '󰫮', # mdi-alpha-a
      '󰯬', # mdi-alpha-a-circle
      '󰯭', # mdi-alpha-a-circle-outline
      '󰫵', # mdi-alpha-h
      '󰰁', # mdi-alpha-h-circle
      '󰰂', # mdi-alpha-h-circle-outline
      '󰫶', # mdi-alpha-i
      '󰰄', # mdi-alpha-i-circle
      '󰰅', # mdi-alpha-i-circle-outline
      '󰬀', # mdi-alpha-s
      '󰰢', # mdi-alpha-s-circle
      '󰰣', # mdi-alpha-s-circle-outline
      '󰬁', # mdi-alpha-t
      '󰰥', # mdi-alpha-t-circle
      '󰰦', # mdi-alpha-t-circle-outline
      '󰬄', # mdi-alpha-w
      '󰰮', # mdi-alpha-w-circle
      '󰰯', # mdi-alpha-w-circle-outline
    ]

  - id: mdi_calendar
    file: 'fonts/materialdesignicons-webfont.ttf'
    size: 24
    glyphs: [
      '󰜪', # mdi-washing-machine
      '󰻗', # mdi-calendar-account
      '󰨱', # mdi-calendar-alert
      '󰧓', # mdi-calendar-star
      '󰻚', # mdi-calendar-weekend-outline
      '󰩺', # mdi-trash-can-outline
      ]

  - id: mdi_wifi
    file: 'fonts/materialdesignicons-webfont.ttf'
    size: 18
    glyphs: [
      '󰤫', # mdi-wifi-strength-alert-outline
      '󰤟', # mdi-wifi-strength-1
      '󰤢', # mdi-wifi-strength-2
      '󰤥', # mdi-wifi-strength-3
      '󰤨', # mdi-wifi-strength-4

      ]

  - id: mdi_med
    file: 'fonts/materialdesignicons-webfont.ttf'
    size: 33
    glyphs: [
      '󰀦', # mdi-alert
      ]

#######################################################################################################################
# Retrieve local time and sensor data from Home Assistant
time:
  - platform: homeassistant
    id: homeassistant_time

sensor:
  - platform: homeassistant
    entity_id: sensor.weather_station_outtemp_c
    id: temperature

  - platform: homeassistant
    entity_id: sensor.weather_station_outtemp_c_18h_min
    id: temperature_min

  - platform: homeassistant
    entity_id: sensor.weather_station_outhumidity
    id: humidity

  - platform: homeassistant
    entity_id: sensor.weather_station_rain24_mm
    id: rain_24h

  - platform: homeassistant
    entity_id: sensor.dwd_forecast_temp
    id: forecast_temp

  - platform: homeassistant
    entity_id: sensor.dwd_forecast_templow
    id: forecast_templow

  - platform: homeassistant
    entity_id: sensor.dwd_forecast_precipitation
    id: forecast_precip

  - platform: homeassistant
    entity_id: sensor.dwd_forecast_precipitation_probability
    id: forecast_precip_prob

  - platform: homeassistant
    entity_id: sensor.epaper_forecast_solar_production
    id: forecast_solar_production

  - platform: homeassistant
    entity_id: sensor.waste_collection_next_tage
    id: muell_entsorgung_tage

  - platform: wifi_signal
    name: "ePaper Display WiFi Signal"
    id: wifisignal
    update_interval: 60s

  - platform: template
    name: "ePaper Display Last Update"
    device_class: timestamp
    id: epaperdisplay_last_update

text_sensor:
  - platform: homeassistant
    entity_id: sensor.epaper_display_datumsstempel
    id: datumsstempel

  - platform: homeassistant
    entity_id: sensor.waste_collection_next
    id: muell_entsorgung

  - platform: homeassistant
    entity_id: sensor.dwd_forecast_tagesstempel
    id: forecast_tagesstempel

  - platform: homeassistant
    entity_id: sensor.dwd_forecast_condition
    id: forecast_condition

  - platform: homeassistant
    entity_id: sensor.epaper_display_position_werner
    id: pos_werner
    on_value:
      then:
        - component.update: epaperdisplay

  - platform: homeassistant
    entity_id: sensor.epaper_display_position_irene
    id: pos_irene
    on_value:
      then:
        - component.update: epaperdisplay

  - platform: homeassistant
    entity_id: sensor.epaper_display_position_thomas
    id: pos_thomas
    on_value:
      then:
        - component.update: epaperdisplay

  - platform: homeassistant
    entity_id: sensor.epaper_display_position_stephan
    id: pos_stephan
    on_value:
      then:
        - component.update: epaperdisplay

  - platform: homeassistant
    entity_id: sensor.epaper_kalender_geburtstag
    id: cal_geburtstag

  - platform: homeassistant
    entity_id: sensor.epaper_kalender_termin
    id: cal_termin

  - platform: homeassistant
    entity_id: sensor.epaper_kalender_feiertag
    id: cal_feiertag

  - platform: homeassistant
    entity_id: sensor.epaper_kalender_nurzen100
    id: cal_n100

  - platform: homeassistant
    entity_id: input_select.waschmaschine_opstate
    id: opstate_waschmaschine
    on_value:
      then:
        - delay: 30s
        - component.update: epaperdisplay

#######################################################################################################################
# Device configuration

#status_led:
#  pin: GPIO27

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO26

display:
  - platform: waveshare_epaper
    id: epaperdisplay
    cs_pin: GPIO19
    dc_pin: GPIO21
    busy_pin: GPIO22
    reset_pin: GPIO25
    model: 4.20in
    update_interval: 30min
    ###################################################################################################################
    # Display content
    lambda: |-

      id(epaperdisplay_last_update).publish_state(id(homeassistant_time).now().timestamp);

      /////////////////////////////////////////////////////////////////////////
      it.print(10, 10, id(font_header), TextAlign::LEFT, "WETTER");
      //it.strftime(10, 10, id(font_header), TextAlign::LEFT , "%a %d. %b", id(homeassistant_time).now()); // english
      it.print(400-10, 10, id(font_header), TextAlign::RIGHT, "POS");
      it.filled_rectangle(98, 10+11, 245, 3); // horizontal 1

      if (id(datumsstempel).state == "unknown" || id(datumsstempel).state == "") {
        it.print(10, 175, id(font_header), TextAlign::LEFT, "KALENDER");
      } else {
        it.printf(10, 175, id(font_header), TextAlign::LEFT, "%s", id(datumsstempel).state.c_str());
      }

      it.filled_rectangle(120, 175+11, 172, 3); // horizontal 2

      /////////////////////////////////////////////////////////////////////////
      /* Block 1 - WETTER */
      int b1_x_start = 15;
      int b1_x_end = 300;
      int b1_y_start = 50;

      // Current temperature
      if (isnan(id(temperature).state)) {
        it.print(b1_x_start+145, b1_y_start+30, id(font_wetter_gross), TextAlign::BASELINE_RIGHT, " - ºC");
      } else {
        it.printf(b1_x_start+145, b1_y_start+30, id(font_wetter_gross), TextAlign::BASELINE_RIGHT, "%2.1fºC", id(temperature).state);
      }

      // Min temperature 24h
      if (isnan(id(temperature_min).state)) {
        it.print(b1_x_end-40, b1_y_start+5, id(font_wetter_mittel), TextAlign::BASELINE_RIGHT, " - ºC");
      } else {
        it.printf(b1_x_end-40, b1_y_start+5, id(font_wetter_mittel), TextAlign::BASELINE_RIGHT, "%2.1fºC", id(temperature_min).state);
      }
      it.print(b1_x_end-20, b1_y_start+5+1, id(mdi_wetter_klein), TextAlign::BASELINE_CENTER, "󰸂"); //low temperature

      // Rain 24h
      if (isnan(id(rain_24h).state)) {
        it.print(b1_x_end-40, b1_y_start+35, id(font_wetter_mittel), TextAlign::BASELINE_RIGHT, " - mm");
      } else {
        it.printf(b1_x_end-40, b1_y_start+35, id(font_wetter_mittel), TextAlign::BASELINE_RIGHT, "%2.1fmm", id(rain_24h).state);
      }
      it.print(b1_x_end-20, b1_y_start+35+1, id(mdi_wetter_klein), TextAlign::BASELINE_CENTER, "󰆫"); //rain

      // Forecast
      auto forecast_cond = id(forecast_condition).state;
      if (forecast_cond == "unknown" || forecast_cond == "") {
        it.print(b1_x_start, b1_y_start+55, id(mdi_wetter_gross), TextAlign::TOP_LEFT, "󰨹");  // mdi-cloud-question
      } else {
        auto cond_icon = "󰨹";  // mdi-cloud-question
        if (forecast_cond == "Klare Nacht") {
          cond_icon = "󰖔"; // mdi-weather-night
        } else if (forecast_cond == "Wolkig") {
          cond_icon = "󰖐";  // mdi-weather-cloudy
        } else if (forecast_cond == "Außergewöhnlich") {
          cond_icon = "󰼯";  // mdi-weather-cloudy-alert
        } else if (forecast_cond == "Nebel") {
          cond_icon = "󰖑";  // mdi-weather-fog
        } else if (forecast_cond == "Hagel") {
          cond_icon = "󰖒";  // mdi-weather-hail
        } else if (forecast_cond == "Gewitter") {
          cond_icon = "󰖓";  // mdi-weather-lightning
        } else if (forecast_cond == "Gewitterregen") {
          cond_icon = "󰙾";  // mdi-weather-lightning-rainy
        } else if (forecast_cond == "Teils Wolkig") {
          cond_icon = "󰖕";  // mdi-weather-partly-cloudy
        } else if (forecast_cond == "Nieselregen") {
          cond_icon = "󰼳"; // mdi-weather-partly-rainy
        } else if (forecast_cond == "Regen") {
          cond_icon = "󰖖";  // mdi-weather-pouring
        } else if (forecast_cond == "Schnee") {
          cond_icon = "󰼶";  // mdi-weather-snowy-heavy
        } else if (forecast_cond == "Schneeregen") {
          cond_icon = "󰙿";  // mdi-weather-snowy-rainy
        } else if (forecast_cond == "Sonnig") {
          cond_icon = "󰖙";  // mdi-weather-sunny
        } else if (forecast_cond == "Windig") {
          cond_icon = "󰖝";  // mdi-weather-windy
        } else if (forecast_cond == "Böig") {
          cond_icon = "󰖞";  // mdi-weather-windy-variant
        }

        it.print(b1_x_start, b1_y_start+55, id(mdi_wetter_gross), TextAlign::TOP_LEFT, cond_icon);
        it.printf(b1_x_start+65, b1_y_start+55, id(font_wetter_mittel), TextAlign::TOP_LEFT, "%s %s", id(forecast_tagesstempel).state.c_str(), forecast_cond.c_str());
        //it.printf(b1_x_start+65, b1_y_start+55+30, id(font_wetter_mittel), TextAlign::TOP_LEFT, "%.0f..%.0f°C, %.0fmm, %d%%", id(forecast_templow).state, id(forecast_temp).state, id(forecast_precip).state, int(id(forecast_precip_prob).state));
        it.printf(b1_x_start+65, b1_y_start+55+30, id(font_wetter_klein), TextAlign::TOP_LEFT, "%.0f..%.0f°C, %.0fmm, %dkWh", id(forecast_templow).state, id(forecast_temp).state, id(forecast_precip).state, int(id(forecast_solar_production).state));
      }

      /////////////////////////////////////////////////////////////////////////
      /* Block 3 - KALENDER */
      int y_start_c = 228;
      int y_sep_c = 30;
      int cal_index = 0;
      if (id(opstate_waschmaschine).state == "Active") {
        it.print(25, y_start_c+cal_index*y_sep_c, id(mdi_calendar), TextAlign::BASELINE_CENTER, "󰜪"); // mdi-washing-machine
        it.print(45, y_start_c+cal_index*y_sep_c-2, id(font_calendar), TextAlign::BASELINE_LEFT, "Waschmaschine läuft ...");
        cal_index += 1;
      }
      if (id(opstate_waschmaschine).state == "Finished") {
        it.print(25, y_start_c+cal_index*y_sep_c, id(mdi_calendar), TextAlign::BASELINE_CENTER, "󰜪"); // mdi-washing-machine
        it.print(45, y_start_c+cal_index*y_sep_c-2, id(font_calendar), TextAlign::BASELINE_LEFT, "Waschmaschine ist fertig!");
        cal_index += 1;
      }
      if (id(cal_geburtstag).state != "unknown" && id(cal_geburtstag).state != "unavailable" && id(cal_geburtstag).state != "") {
        it.print(25, y_start_c+cal_index*y_sep_c, id(mdi_calendar), TextAlign::BASELINE_CENTER, "󰻗"); // mdi-calendar-account
        it.printf(45, y_start_c+cal_index*y_sep_c-2, id(font_calendar), TextAlign::BASELINE_LEFT, "%s", id(cal_geburtstag).state.c_str());
        cal_index += 1;
      }
      if (id(cal_n100).state != "unknown" && id(cal_n100).state != "unavailable" && id(cal_n100).state != "") {
        it.print(25, y_start_c+cal_index*y_sep_c, id(mdi_calendar), TextAlign::BASELINE_CENTER, "󰻚"); // mdi-calendar-star
        it.printf(45, y_start_c+cal_index*y_sep_c-2, id(font_calendar), TextAlign::BASELINE_LEFT, "%s", id(cal_n100).state.c_str());
        cal_index += 1;
      }
      if (id(cal_termin).state != "unknown" && id(cal_termin).state != "unavailable" && id(cal_termin).state != "") {
        it.print(25, y_start_c+cal_index*y_sep_c, id(mdi_calendar), TextAlign::BASELINE_CENTER, "󰨱"); // mdi-calendar-alert
        it.printf(45, y_start_c+cal_index*y_sep_c-2, id(font_calendar), TextAlign::BASELINE_LEFT, "%s", id(cal_termin).state.c_str());
        cal_index += 1;
      }
      if (id(cal_feiertag).state != "unknown" && id(cal_feiertag).state != "unavailable" && id(cal_feiertag).state != "") {
        it.print(25, y_start_c+cal_index*y_sep_c, id(mdi_calendar), TextAlign::BASELINE_CENTER, "󰧓"); // mdi-calendar-star
        it.printf(45, y_start_c+cal_index*y_sep_c-2, id(font_calendar), TextAlign::BASELINE_LEFT, "%s", id(cal_feiertag).state.c_str());
        cal_index += 1;
      }
      if (id(muell_entsorgung_tage).state < 2) {
        it.print(25, y_start_c+cal_index*y_sep_c, id(mdi_calendar), TextAlign::BASELINE_CENTER, "󰩺"); // mdi-trash-can-outline
        it.printf(45, y_start_c+cal_index*y_sep_c-2, id(font_calendar), TextAlign::BASELINE_LEFT, "%s", id(muell_entsorgung).state.c_str());
        cal_index += 1;
      }

      /////////////////////////////////////////////////////////////////////////
      /* Lösche rechten Bereich */
      it.filled_rectangle(295, 30, 400-295, 300-30, COLOR_OFF);
      //it.filled_rectangle(300, 30, 3, 245); // vertikale Linie
      it.filled_rectangle(300, 30, 3, 300-30-10); // vertikale Linie

      /////////////////////////////////////////////////////////////////////////
      /* Block 2 - POSITION */
      int b2_x_start = 300+3+20;
      int b2_y_start = 85;
      int b2_x_end = 395;
      int xsep = 25;
      int ysep = 42; // 52
      int y_text_shift = -5;


      auto pos_werner_text = id(pos_werner).state;
      const char *pos_werner_icon = "󰰯"; // mdi-alpha-w-circle-outline
      if (pos_werner_text == "Zuh.") {
        pos_werner_icon = "󰰮"; // mdi-alpha-w-circle
      } else if (pos_werner_text == "unavailable" || pos_werner_text == "unknown" || pos_werner_text == "") {
        pos_werner_icon = "󰬄"; // mdi-alpha-w
        pos_werner_text = "";
      }

      auto pos_irene_text = id(pos_irene).state;
      const char *pos_irene_icon = "󰰅"; // mdi-alpha-i-circle-outline
      if (pos_irene_text == "Zuh.") {
        pos_irene_icon = "󰰄"; // mdi-alpha-i-circle
      } else if (pos_irene_text == "unavailable" || pos_irene_text == "unknown" || pos_irene_text == "") {
        pos_irene_icon = "󰫶"; // mdi-alpha-i
        pos_irene_text = "";
      }

      auto pos_thomas_text = id(pos_thomas).state;
      const char *pos_thomas_icon = "󰰦"; // mdi-alpha-t-circle-outline
      if (pos_thomas_text == "Zuh." || pos_thomas_text == "Woh.") {
        pos_thomas_icon = "󰰥"; // mdi-alpha-t-circle
      } else if (pos_thomas_text == "unavailable" || pos_thomas_text == "unknown" || pos_thomas_text == "") {
        pos_thomas_icon = "󰬁"; // mdi-alpha-t
        pos_thomas_text = "";
      }

      auto pos_stephan_text = id(pos_stephan).state;
      const char *pos_stephan_icon = "󰰣"; // mdi-alpha-s-circle-outline
      if (pos_stephan_text == "Zuh." || pos_stephan_text == "Woh.") {
        pos_stephan_icon = "󰰢"; // mdi-alpha-s-circle
      } else if (pos_stephan_text == "unavailable" || pos_stephan_text == "unknown" || pos_stephan_text == "") {
        pos_stephan_icon = "󰬀"; // mdi-alpha-s
        pos_stephan_text = "";
      }

      it.print(b2_x_start, b2_y_start+0*ysep, id(mdi_letters), TextAlign::BASELINE_CENTER, pos_werner_icon);
      it.printf(b2_x_start+xsep, b2_y_start+0*ysep+y_text_shift, id(font_position), TextAlign::BASELINE_LEFT, "%s", pos_werner_text.c_str());
      it.print(b2_x_start, b2_y_start+1*ysep, id(mdi_letters), TextAlign::BASELINE_CENTER, pos_irene_icon);
      it.printf(b2_x_start+xsep, b2_y_start+1*ysep+y_text_shift, id(font_position), TextAlign::BASELINE_LEFT, "%s", pos_irene_text.c_str());
      it.print(b2_x_start, b2_y_start+2*ysep, id(mdi_letters), TextAlign::BASELINE_CENTER, pos_thomas_icon);
      it.printf(b2_x_start+xsep, b2_y_start+2*ysep+y_text_shift, id(font_position), TextAlign::BASELINE_LEFT, "%s", pos_thomas_text.c_str());
      it.print(b2_x_start, b2_y_start+3*ysep, id(mdi_letters), TextAlign::BASELINE_CENTER, pos_stephan_icon);
      it.printf(b2_x_start+xsep, b2_y_start+3*ysep+y_text_shift, id(font_position), TextAlign::BASELINE_LEFT, "%s", pos_stephan_text.c_str());

      it.print(b2_x_start, b2_y_start+4*ysep, id(mdi_letters), TextAlign::BASELINE_CENTER, "󰯬");
      it.print(b2_x_start+xsep, b2_y_start+4*ysep+y_text_shift, id(font_position), TextAlign::BASELINE_LEFT, "Zuh.");


      /////////////////////////////////////////////////////////////////////////
      /* FOOTER */
      //it.strftime(365, 295, id(font_footer), TextAlign::BASELINE_RIGHT , "%d. %b  %H:%M", id(homeassistant_time).now());

      if(id(wifisignal).has_state()) {
        int x = 380;
        int y = 297;
        if (id(wifisignal).state >= -50) {
          //Excellent
          it.print(x, y, id(mdi_wifi), TextAlign::BASELINE_CENTER, "󰤨");
        } else if (id(wifisignal).state  >= -60) {
          //Good
          it.print(x, y, id(mdi_wifi), TextAlign::BASELINE_CENTER, "󰤥");
        } else if (id(wifisignal).state  >= -75) {
          //Fair
          it.print(x, y, id(mdi_wifi), TextAlign::BASELINE_CENTER, "󰤢");
        } else if (id(wifisignal).state  >= -100) {
          //Weak
          it.print(x, y, id(mdi_wifi), TextAlign::BASELINE_CENTER, "󰤟");
        } else {
          //Unlikely working signal
          it.print(x, y, id(mdi_wifi), TextAlign::BASELINE_CENTER, "󰤫");
        }
      }
