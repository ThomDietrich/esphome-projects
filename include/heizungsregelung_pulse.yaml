
globals:
  # Counter f√ºr Liter durch den Flusssensor
  - id: volumenmessung_heizung_imp
    type: int
    #restore_value: yes
    initial_value: '0'  # 0..100

sensor:
  # S0 energy meter
  #- platform: pulse_meter
  #  name: "${device_friendly_name} Leistungsaufnahme meter"
  #  id: s0_energy_meter
  #  pin: GPIO35
  #  unit_of_measurement: "W"
  #  state_class: measurement
  #  device_class: power
  #  icon: mdi:flash-outline
  #  accuracy_decimals: 2
  #  internal_filter: 100ms
  #  filters:
  #    # multiply value = (60 / imp value) * 1000
  #    # - multiply: 120
  #    - lambda: return x * ((120.0 / ${pulse_rate}) * 1000.0);
  #  timeout:
  #    minutes: 60

    #total:
    #  name: "${device_friendly_name} Energieverbrauch meter"
    #  unit_of_measurement: "kWh"
    #  accuracy_decimals: 5
    #  filters:
    #    - multiply: 0.001

  - platform: pulse_meter
    pin: GPIO39
    name: "${device_friendly_name} Pulse Meter 39 Leistung"
    internal_filter: 50ms
    accuracy_decimals: 3
    timeout:
      minutes: 5
    internal_filter_mode: EDGE

  #- platform: pulse_meter
  #  pin: GPIO34
  #  name: "${device_friendly_name} Pulse Meter 34 Heizung"
  #  internal_filter: 50ms
  #  accuracy_decimals: 1
  #  timeout:
  #    seconds: 30
  #  internal_filter_mode: PULSE
  #- platform: pulse_meter
  #  pin: GPIO35
  #  name: "Pulse Meter 35 Warmwasser"
  #  internal_filter: 50ms
  #  accuracy_decimals: 1
  #  timeout:
  #    seconds: 30

  - platform: pulse_counter
    pin: GPIO34
    name: "${device_friendly_name} Pulse Counter 34 Heizung"
    accuracy_decimals: 1
    update_interval: 10s

  - platform: pulse_counter
    pin: GPIO35
    name: "${device_friendly_name} Pulse Counter 35 Warmwasser"
    accuracy_decimals: 1
    update_interval: 10s
