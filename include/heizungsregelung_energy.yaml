
# Zenner Warmwasserzähler mit Impulsausgang 0,25 Liter

globals:
  - id: global_wasser_liter
    type: float
    restore_value: no
    initial_value: '0.0'
  - id: global_energie_kwh
    type: float
    restore_value: no
    initial_value: '0.0'

binary_sensor:
  # https://esphome.io/components/binary_sensor/gpio.html
  - platform: gpio
    #name: ${device_friendly_name} Heizkreis Volumenstrommessung Sensor
    id: intern_gpio_tick
    pin: GPIO34
    icon: mdi:square-wave
    internal: true
    entity_category: diagnostic
    filters:
      - delayed_on: 100ms
      - delayed_off: 100ms
    on_release:
      - globals.set:
          id: global_wasser_liter
          value: !lambda |-
            return id(global_wasser_liter) + 0.25;  // 0.25 Liter pro Impuls
      - if:
          condition:
            lambda: |-
              return !isnan(id(heizkreis_diff).state);
          then:
            - globals.set:
                id: global_energie_kwh
                value: !lambda |-
                  const int m_g = 250;  // Bezugsmenge des Wassers (0.25 Liter pro Impuls * 990g/l = 248g)
                  const float c_wh_kgk = 1.1625;  // Spezifische Wärmekapazität Wasser in Wh/(kg·K)
                  const float k_k = id(heizkreis_diff).state;  // Zugeführte Wärme in Kelvin
                  // Ergebnis: Wärmeenergie Q in Kilowatt
                  return id(global_energie_kwh) + m_g * c_wh_kgk * k_k / 1000 / 1000;
      - component.update: heizung_wasser
      - component.update: heizung_energie

sensor:
  - platform: template
    name: ${device_friendly_name} Heizkreis Wasser
    id: heizung_wasser
    state_class: total_increasing
    #device_class: energy
    icon: mdi:home-lightning-bolt-outline
    unit_of_measurement: l
    accuracy_decimals: 1
    lambda: return id(global_wasser_liter);
    update_interval: 60s

  - platform: template
    name: ${device_friendly_name} Heizkreis Energie
    id: heizung_energie
    state_class: total_increasing
    #device_class: energy
    icon: mdi:home-lightning-bolt-outline
    unit_of_measurement: kWh
    accuracy_decimals: 2
    lambda: return id(global_energie_kwh);
    update_interval: 60s

  # S0 energy meter
  #- platform: pulse_meter
  #  name: "${device_friendly_name} Leistungsaufnahme meter"
  #  id: s0_energy_meter
  #  pin: GPIO35
  #  unit_of_measurement: "W"
  #  state_class: measurement
  #  device_class: power
  #  icon: mdi:flash-outline
  #  accuracy_decimals: 2
  #  internal_filter: 100ms
  #  filters:
  #    # multiply value = (60 / imp value) * 1000
  #    # - multiply: 120
  #    - lambda: return x * ((120.0 / ${pulse_rate}) * 1000.0);
  #  timeout:
  #    minutes: 60

    #total:
    #  name: "${device_friendly_name} Energieverbrauch meter"
    #  unit_of_measurement: "kWh"
    #  accuracy_decimals: 5
    #  filters:
    #    - multiply: 0.001

  - platform: pulse_meter
    name: "${device_friendly_name} Pulse Meter 39 Leistung"
    pin: GPIO39
    internal_filter: 50ms
    accuracy_decimals: 3
    timeout:
      minutes: 5
    internal_filter_mode: EDGE

  #- platform: pulse_meter
  #  pin: GPIO34
  #  name: "${device_friendly_name} Pulse Meter 34 Heizung"
  #  internal_filter: 50ms
  #  accuracy_decimals: 1
  #  timeout:
  #    seconds: 30
  #  internal_filter_mode: PULSE
  #- platform: pulse_meter
  #  pin: GPIO35
  #  name: "Pulse Meter 35 Warmwasser"
  #  internal_filter: 50ms
  #  accuracy_decimals: 1
  #  timeout:
  #    seconds: 30

  #- platform: pulse_counter
  #  pin: GPIO34
  #  name: "${device_friendly_name} Pulse Counter 34 Heizung"
  #  accuracy_decimals: 1
  #  update_interval: 10s

  - platform: pulse_counter
    name: "${device_friendly_name} Pulse Counter 35 Warmwasser"
    pin: GPIO35
    accuracy_decimals: 1
    update_interval: 10s
