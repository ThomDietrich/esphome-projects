substitutions:
  device_name: taubenfutterspender
  device_friendly_name: Taubenfutterspender
  device_area: Hof

  status_led_pin: GPIO2

# https://docs.m5stack.com/en/core/stamp_c3u

esphome:
  name: ${device_name}
  friendly_name: ${device_friendly_name}
  area: ${device_area}
  min_version: '2022.12'
  platformio_options:
    board_build.flash_mode: dio
    board_build.mcu: esp32c3
#    platform_packages:
#      - platformio/framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git#2.0.5

  on_boot:
        - binary_sensor.template.publish:
            id: sensor_servo_running
            state: OFF


esp32:
  board: esp32-c3-devkitm-1
  variant: esp32c3
  framework:
    type: arduino
    # version: 2.0.5
    # platform_version: 5.2.0
    # TEST
    # type: esp-idf
    # version: recommended


packages:
  wifi: !include common/wifi.yaml
  general: !include common/general.yaml
  status_led: !include include/on_board_status_led_sk6812.yaml


globals:
  - id: gram_per_sec
    type: int
    restore_value: no
    initial_value: '25' # 500 Gramm in 20 Sekunden

  - id: global_mass_total
    type: float
    restore_value: no
    initial_value: '0.0'


sensor:
  - platform: template
    name: Foerdermenge total
    id: sensor_mass_total
    device_class: weight
    unit_of_measurement: g
    icon: mdi:scale
    accuracy_decimals: 1
    lambda: return id(global_mass_total);
    update_interval: 3600s # fallback aside triggered update

  - platform: hx711
    name: HX711 Value
    id: sensor_load_cell
    dout_pin: GPIO7
    clk_pin: GPIO8
    update_interval: 5s
    # filters:
    #   - calibrate_linear:
    #       - 120 -> 0
    #       - 810 -> 1
    # state_class: total
    # device_class: weight
    # unit_of_measurement: g
    # accuracy_decimals: 1

# https://esphome.io/components/output/ledc
output:
  - platform: ledc
    pin: GPIO10
    id: servo_pwm
    frequency: 50 Hz


# https://esphome.io/components/servo.html
# Turnigy TGY-SM-4309R https://hobbyking.com/en_us/turnigy-tgy-sm-4309r-360-analog-metal-gear-robot-servo-8-7kg-57rpm-56g.html
# http://rcsearch.info/hobbyking/i41212/#catalog
servo:
  - id: servo_control
    output: servo_pwm
    #min_level: 5.75% # Förderschraube darf sich nicht rückwärts drehen
    min_level: 7.25%
    idle_level: 7.25%
    max_level: 8.75%
    restore: false
    transition_length: 1s


script:
  - id: script_run_auger_screw
    parameters:
      runtime_seconds: float # 0..999
      speed_percent: float # 0..100
    then:

      # Signalisiere Beginn der Aktivität
      - light.turn_on:
          id: on_board_led
          red: 60%
          green: 50%
          blue: 0%
          brightness: 100%
          transition_length: 500ms
      - binary_sensor.template.publish:
          id: sensor_servo_running
          state: ON

      # Servo für gegebene Dauer laufen lassen
      - servo.write:
          id: servo_control
          level: !lambda 'return speed_percent / 100.0;'
      - delay: !lambda 'return runtime_seconds * 1000;'
      - servo.detach: servo_control

      # Sensoren aktualisieren
      - globals.set:
          id: global_mass_total
          # 500 Gramm in 20 Sekunden
          value: !lambda |-
            return id(global_mass_total) + (speed_percent / 100.0 * (id(gram_per_sec) * runtime_seconds));
      - component.update: sensor_mass_total

      # Signalisiere Ende der Aktivität
      - binary_sensor.template.publish:
          id: sensor_servo_running
          state: OFF
      - light.turn_off:
          id: on_board_led
          transition_length: 500ms


binary_sensor:
  - platform: template
    name: Foerderschraube aktiv
    id: sensor_servo_running

  - platform: gpio
    id: on_board_button
    name: Gelber Taster am Gehäuse (gleicht On-Board Button)
    pin:
      number: GPIO9
      inverted: true
    filters:
      - delayed_on: 50ms
    on_press:
      then:
        - script.execute:
            id: script_run_auger_screw
            runtime_seconds: 10
            speed_percent: 100


# Home Assistant Services
api:
  services:
    - service: run_auger_screw
      variables:
        runtime_seconds: float # 0..999
        speed_percent: float # 0..100
      then:
        - script.execute:
            id: script_run_auger_screw
            runtime_seconds: !lambda 'return runtime_seconds;'
            speed_percent: !lambda 'return speed_percent;'

    - service: produce_food_amount
      variables:
        mass_grams: float
      then:
        - script.execute:
            id: script_run_auger_screw
            runtime_seconds: !lambda 'return mass_grams / (1.0 * id(gram_per_sec));'
            speed_percent: 100


# https://esphome.io/components/number/template.html
number:
  - platform: template
    name: Servo Control Debug
    icon: mdi:screw-round-top
    mode: slider # slider, box
    min_value: 0 # Förderschraube darf sich nicht rückwärts drehen
    initial_value: 0
    max_value: 100
    step: 1
    optimistic: false
    set_action:
      then:
        - servo.write:
            id: servo_control
            level: !lambda 'return x / 100.0;'
        - if:
            condition:
              lambda: 'return x > 0;'
            then:
              - binary_sensor.template.publish:
                  id: sensor_servo_running
                  state: ON
            else:
              - binary_sensor.template.publish:
                  id: sensor_servo_running
                  state: OFF
