substitutions:
  device_name: taubenfutterspender
  device_friendly_name: Taubenfutterspender
  device_area: Hof

  status_led_pin: GPIO2

# https://docs.m5stack.com/en/core/stamp_c3u

esphome:
  name: ${device_name}
  friendly_name: ${device_friendly_name}
  area: ${device_area}
  min_version: '2022.12'
  platformio_options:
    board_build.flash_mode: dio
    board_build.mcu: esp32c3
#    platform_packages:
#      - platformio/framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git#2.0.5

  on_boot:
    - priority: -10
      then:
        - servo.detach: servo_control
        - binary_sensor.template.publish:
            id: sensor_servo_running
            state: OFF


esp32:
  board: esp32-c3-devkitm-1
  variant: esp32c3
  framework:
    type: arduino
    # version: 2.0.5
    # platform_version: 5.2.0
    # TEST
    # type: esp-idf
    # version: recommended


packages:
  wifi: !include common/wifi.yaml
  general: !include common/general.yaml
  status_led: !include include/on_board_status_led_sk6812.yaml


globals:
  - id: global_mass_before_last_run
    type: float
    restore_value: no
    initial_value: '0.0'

  - id: global_mass_last_run
    type: float
    restore_value: no
    initial_value: '0.0'


time:
  - platform: homeassistant
    id: homeassistant_time


# https://esphome.io/components/output/ledc
output:
  - platform: ledc
    pin: GPIO10
    id: servo_pwm
    frequency: 50 Hz

# https://esphome.io/components/servo.html
# Turnigy TGY-SM-4309R https://hobbyking.com/en_us/turnigy-tgy-sm-4309r-360-analog-metal-gear-robot-servo-8-7kg-57rpm-56g.html
# http://rcsearch.info/hobbyking/i41212/#catalog
servo:
  - id: servo_control
    output: servo_pwm
    #min_level: 5.75%  # Förderschraube darf sich nicht rückwärts drehen
    min_level: 7.25%
    idle_level: 7.25%
    max_level: 8.75%
    restore: false
    transition_length: 1s


sensor:
  - platform: template
    name: Futtermenge letzte Ausgabe
    id: sensor_mass_last_run
    icon: mdi:scale
    lambda: return id(global_mass_last_run);
    update_interval: 3600s # fallback aside triggered update
    device_class: weight
    unit_of_measurement: g
    accuracy_decimals: 0

  - platform: hx711
    name: Futtermenge Vorrat
    id: sensor_load_mass
    dout_pin: GPIO7
    clk_pin: GPIO8
    update_interval: 5s
    filters:
      - calibrate_linear:
          - 92000 -> 0
          - 608000 -> 5000
      - lambda: if (x < 25) return 0; else return x;
      - delta: 5  # grams difference
    device_class: weight
    unit_of_measurement: g
    accuracy_decimals: 0

  - platform: template
    name: Letzte Ausgabe
    device_class: timestamp
    id: sensor_last_run


binary_sensor:
  - platform: template
    name: Foerderschraube Aktiv
    id: sensor_servo_running
    # Wird durch actions gesetzt

  - platform: gpio
    name: Gelber Gehaeuse-Taster (identisch zu On-Board-Taster)
    internal: true
    pin:
      number: GPIO9
      inverted: true
    filters:
      - delayed_on: 50ms
    on_press:
      then:
        - script.execute:
            id: script_run_auger_screw
            timeout_seconds: 8
            mass_gram: 9999


script:
  - id: script_run_auger_screw
    mode: single
    parameters:
      timeout_seconds: float  # Maximale Laufzeit in Sekunden
      mass_gram: float  # Ziel Futtermenge (Wird aufgrund des Nachlaufens geringfügig übersteuern)
    then:

      # Signalisiere Beginn der Aktivität
      - light.turn_on:
          id: on_board_led
          red: 60%
          green: 50%
          blue: 0%
          brightness: 100%
          transition_length: 500ms
      - binary_sensor.template.publish:
          id: sensor_servo_running
          state: ON

      # Merke Vorratsmenge vor der Ausgabe
      - globals.set:
          id: global_mass_before_last_run
          value: !lambda 'return id(sensor_load_mass).state;'

      # Servo für gegebene Menge/Dauer laufen lassen
      - servo.write:
          id: servo_control
          level: 1.0
      - wait_until:
          condition:
            lambda: 'return id(global_mass_before_last_run) - id(sensor_load_mass).state >= mass_gram;'
          timeout: !lambda 'return timeout_seconds * 1000;'
      - servo.detach: servo_control

      # Auslaufen lassen
      - delay: 1s

      # Verarbeite Vorratsmenge nach der Ausgabe (Sensoren aktualisieren)
      - globals.set:
          id: global_mass_last_run
          value: !lambda |-
            return id(global_mass_before_last_run) - id(sensor_load_mass).state;
      - component.update: sensor_mass_last_run
      - lambda: |-
          id(sensor_last_run).publish_state(id(homeassistant_time).now().timestamp);

      # Signalisiere Ende der Aktivität
      - binary_sensor.template.publish:
          id: sensor_servo_running
          state: OFF
      - light.turn_off:
          id: on_board_led
          transition_length: 500ms


# Home Assistant Services
api:
  services:
    - service: futter_ausgeben
      variables:
        timeout_seconds: float
        mass_gram: float
      then:
        - script.execute:
            id: script_run_auger_screw
            timeout_seconds: !lambda 'return timeout_seconds;'
            mass_gram: !lambda 'return mass_gram;'


# https://esphome.io/components/number/template.html
number:
  - platform: template
    name: Foerderschraube manuelle Kontrolle
    icon: mdi:screw-round-top
    mode: slider # slider, box
    min_value: 0 # Förderschraube darf sich nicht rückwärts drehen
    initial_value: 0
    max_value: 100
    step: 1
    optimistic: false
    set_action:
      then:
        - if:
            condition:
              lambda: 'return x > 0;'
            then:
              - servo.write:
                  id: servo_control
                  level: !lambda 'return x / 100.0;'
            else:
              - servo.detach: servo_control


button:
  - platform: template
    name: Foerderschraube Notstop
    on_press:
      - script.stop: script_run_auger_screw
      - servo.detach: servo_control
      - light.turn_off: on_board_led
      - binary_sensor.template.publish:
          id: sensor_servo_running
          state: OFF
